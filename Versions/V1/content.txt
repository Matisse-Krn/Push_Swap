/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkerrien <mkerrien@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/15 20:13:40 by mkerrien          #+#    #+#             */
/*   Updated: 2024/11/15 20:16:09 by mkerrien         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

static unsigned int	ft_count_words(char const *str, char c)
{
	unsigned int	count;
	unsigned int	is_word;
	char			*s;

	if (!str)
		return (0);
	s = (char *)str - 1;
	count = 0;
	is_word = 0;
	while (*(++s))
	{
		if (*s != c && is_word == 0)
		{
			count++;
			is_word = 1;
		}
		if (*s == c)
			is_word = 0;
	}
	return (count);
}

static unsigned int	ft_len_word(char const *str, char c)
{
	unsigned int	len;

	len = 0;
	while (*str && *str != c)
	{
		len++;
		str++;
	}
	return (len);
}

static void	ft_free_all(char **tab, unsigned int index)
{
	while (index > 0)
	{
		index--;
		free(tab[index]);
	}
	free(tab);
}

static void	ft_alloc_write(char const *s, char c, unsigned int nb, char **tab)
{
	unsigned int	i;
	unsigned int	j;

	if (!s || !tab || !(*tab))
		return ;
	i = 0;
	while (i < nb)
	{
		while (*s == c)
			s++;
		if (*s)
		{
			tab[i] = malloc(sizeof(char) * (ft_len_word(s, c) + 1));
			if (!tab[i])
			{
				ft_free_all(tab, i);
				return ;
			}
			j = 0;
			while (*s && *s != c)
				tab[i][j++] = *(s++);
			tab[i][j] = '\0';
			i++;
		}
	}
	tab[i] = NULL;
}

char	**ft_split(char const *s, char c)
{
	unsigned int	nb_word;
	char			**tab;

	if (!s)
		return (NULL);
	nb_word = ft_count_words(s, c);
	tab = ft_calloc(nb_word + 1, sizeof(char *));
	if (!tab)
		return (NULL);
	ft_alloc_write(s, c, nb_word, tab);
	return (tab);
}
/*
#include <stdio.h>

int	main(int argc, char **argv)
{
	char	*str;
	char	sep;
	int		i;
	char	**tab;

	(void)argc;
	i = 0;
	str = argv[1];
	sep = *argv[2];
	str = "Bonjour je m'appelle Matisse.";
	sep = " ";
	tab = ft_split(str, sep);
	while (tab[i] != NULL)
	{
		printf("'%s'\n", tab[i]);
		i++;
	}
	return (0);
}
*/
// 1. compter le nombre de mots
// 2. trouver longueur de chaque mot
// 3. malloc tableau de tableaux (avec longueur des mots ?)
// 4. fonction 'free_all' en cas d'erreur d'allocation
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   create_lists.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkerrien <mkerrien@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/15 01:21:16 by mkerrien          #+#    #+#             */
/*   Updated: 2025/02/16 13:55:22 by mkerrien         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static t_dlist	*init_stack_a(int *tab, int len)
{
	t_dlist	*stack_a;
	int		i;

	tab_to_list(&stack_a, tab, len);
	print_stacks(&stack_a, NULL);
	if (check_if_asc_sorted_list(stack_a) == 1)
	{
		ft_printf("List is already ascending sorted : exit.\n"); // exit
		free_list(stack_a);
		free(tab);
		exit(1);
	}
	else if (check_if_desc_sorted_list(stack_a) == 1 && len == 2)
	{
		ft_printf("List is descending sorted.\n\n\n"); // "just" reverse the order	
		swap_a(&stack_a, 'a');
		free_list(stack_a);
		free(tab);
		exit(0);
	}
	else if (check_if_desc_sorted_list(stack_a) == 1)
	{
		ft_printf("List is descending sorted.\n\n\n"); // "just" reverse the orde
		// sa, ra, ra, sa (pour l'exemple sur papier)

		i = -1;
		while (++i < len)
		{
			print_stacks(&stack_a, NULL);
			reverse_rotate_a(&stack_a, 'a');

		}
		print_stacks(&stack_a, NULL);

	/*	free_list(stack_a);
		free(tab);
		exit(0);
			sa	ra	ra	sa
		4	3	4	2	1
		3	4	2	1	2
		2	2	1	3	3
		1	1	3	4	4

			sa	ra	ra	sa
		5	4	5	3	
		4	5	3	2	1
		3	3	2	1	2
		2	2	1	4	3
		1	1	4	5	4


			rra	  pb		rra		  pb		rra			pb		  sa		  pb...
		5	1	  5		1	2	  1	  5		2	3	  2		5	  3	  4		3	  3		2	...
		4	5	  4			5		  4		1	5	  1		4	  2	  5		2	  4		1
		3	4	  3			4		  3			4				  1			1	  5
		2	3	  2			3	  
		1	2	  
		a	a	  a		b	a	  b	  a		b	a	  b		a	  b	  a		b	  a		b
		*/
	}
	return (stack_a);
}

void	create_lists(t_dlist **stack_a, t_dlist **stack_b, int *tab, int len)
{
	int		*sort;
(void)stack_b;
	*stack_a = init_stack_a(tab, len);	
	if (!stack_a)
		return ;
//	stack_b = NULL;
	//(*stack_b)->next = NULL;
	//(*stack_b)->prev = NULL;
	sort = sort_tab(tab, len);
	if (!sort)
		free(stack_a);
	set_final_position(sort, len, stack_a);
//	test_push(stack_a, stack_b);
	free(sort);
//	free_list(*stack_a);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   list_basics.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkerrien <mkerrien@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/13 00:24:52 by mkerrien          #+#    #+#             */
/*   Updated: 2025/02/16 13:27:10 by mkerrien         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

t_dlist	*dlst_new(int value, int index, char name)
{
	t_dlist	*new;

	new = ft_calloc(1, sizeof(t_dlist));
	if (!new)
		return (NULL);
	new->value = value;
	new->index = index;
	new->name = name;
	new->next = NULL;
	new->prev = NULL;
	return (new);
}

void	dlst_add_last(t_dlist **dlist, t_dlist *new)
{
	t_dlist *tmp;

	if (!dlist || !new)
		return ;
	if (!*dlist)
	{
		*dlist = new;
		return ;
	}
	tmp = *dlist;
	while (tmp->next != NULL)
		tmp = tmp->next; 
	new->prev = tmp;
	tmp->next = new;
}

void	tab_to_list(t_dlist **stack_a, int *tab, int len)
{
	int		i;
	t_dlist	*new;

	if (!tab)
		return ;
	*stack_a = dlst_new(tab[0], 0, 'a');
	if (!(*stack_a))
		return ;
	i = 0;
	while (++i < len)
	{
		new = dlst_new(tab[i], i, 'a');
		dlst_add_last(stack_a, new);
	}
}

void	free_list(t_dlist *head)
{
	t_dlist	*tmp;
	t_dlist	*next;

	tmp = head;
	while (tmp)
	{
		next = tmp->next;
		free(tmp);
		tmp = next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   list_utils.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkerrien <mkerrien@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/14 02:29:14 by mkerrien          #+#    #+#             */
/*   Updated: 2025/02/16 13:43:50 by mkerrien         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

/*
 * Return 1 if the list is sorted in ascending order, else return 0
*/
int	  check_if_asc_sorted_list(t_dlist *stack)
{
	t_dlist	*tmp;

	tmp = stack;
	while (tmp && tmp->next)
	{
		if (tmp->value > tmp->next->value)
			return (0);
		tmp = tmp->next;
	}
	return (1);
}

/*
 * Return 1 if the list is sorted in descending order, else return 0
*/
int	  check_if_desc_sorted_list(t_dlist *stack)
{
	t_dlist	*tmp;

	tmp = stack;
	while (tmp && tmp->next)
	{
		if (tmp->value < tmp->next->value)
			return (0);
		tmp = tmp->next;
	}
	return (1);
}

void	reassign_index(t_dlist **stack)
{
	t_dlist	*tmp;
	int		index;

	tmp = *stack;
	index = 0;
	while (tmp)
	{
		tmp->index = index++;
		tmp = tmp->next;
	}
}

int	*sort_tab(int *tab, int len)
{
	int	i;
	int	j;
	int tmp;
	int	*sort;

	ft_printf("LEN : %d\nORIGINAL :\n", len);
	i= -1;
	while (++i < len)
		ft_printf("%d  ||  ", tab[i]);


	sort = ft_calloc(len, sizeof(int));
	if (!sort)
		return (NULL);
	i = -1;
	while (++i < len)
		sort[i] = tab[i];
	i = -1;
	while (++i < len - 1)
	{
		j = -1;
		while (++j < len - 1 - i)
		{
			if (sort[j] > sort[j + 1])
			{
				tmp = sort[j];
				sort[j] = sort[j + 1];
				sort[j + 1] = tmp;
			}
		}
	}
	free(tab);
	return (sort);
}

int	*set_final_position(int *sort, int len, t_dlist **stack)
{
	int	i;
	t_dlist	*tmp;

	tmp = *stack;
	while (tmp)
	{
		i = -1;
		while (tmp->value != sort[++i] && i < len - 1)
			;
		tmp->pos = i;
		tmp = tmp->next;
	}
	ft_printf("\n\nFinal :\n");
	i = -1;
	while (++i < len)
		ft_printf("%d  ||  ", sort[i]);
	return (sort);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkerrien <mkerrien@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/10 14:07:13 by mkerrien          #+#    #+#             */
/*   Updated: 2025/02/16 13:25:21 by mkerrien         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

/*
 * Free all arrays in the array of arrays, to prevent leaks
*/
void	free_str(char **tabtab)
{
	int	i;

	if (!tabtab)
		return ;
	i = -1;
	while (tabtab[++i])
		free(tabtab[i]);
	free(tabtab);
}

/*
 * Determines whether elements are passed :
 *	  in a single string : `./push_swap “54 32 87"`
 *	  one by one : `./push_swap 54 32 87`
 * Extract each element and assign it to an array of arrays 'input'
*/
static char	**extract_input(int argc, char **argv)
{	
	char	**input;
	int		i;

	i = -1;
	if (argc == 2)
	{
		if (!argv[1])
			return (NULL);
		input = ft_split(argv[1], ' ');
	//	ft_printf("input : %s, ", input);
		if (!input/* || !(*input)*/)
			return (free(*input), free(input), NULL);
/*		while (input[++i])
		{
			ft_printf("%s, ", input[i]);
		}
		i = -1;
*/	}
	else if (argc > 2)
	{ 
		input = ft_calloc(argc, sizeof(char *));
		if (!input)
			return (NULL);
		while (++i < argc - 1)
		{
			input[i] = ft_strdup(argv[i + 1]);
			if (!input[i])
				return (NULL);
		}
		input[i] = NULL;
	}
	else
		return (NULL);
	return (input);
}

void  sort_stacks(t_dlist **stack_a, t_dlist **stack_b)
{
	(void)stack_a;
	(void)stack_b;
	/* algo de tri*/;
}

/*
 * Calls 'extract_input()' to extract the 'input' of all elements,
 * Calls the 'parsing_check()' function to perform all input checks/verifications.
 * Convert the input string into a array of int
*/
int	main(int argc, char **argv)
{
	char	**input;
	int		*tab;
	int		len;
	t_dlist	*stack_a;
	t_dlist	*stack_b;
	


//	int		i;

	stack_a = NULL;
	stack_b = NULL;
	len = 0;
	input = extract_input(argc, argv);
	if (!input)
		return (1);
//	i = -1;
//	while (input[++i])
//	{
//		ft_printf("%s, ", input[i]);
//	}
	if (parsing_check(input))
	{
		free_str(input);
		return (1);
	}
	tab = convert_str_to_tab(input, &len);
	if (!tab)
		return (1);
	free_str(input);
	create_lists(&stack_a, &stack_b, tab, len);
//	sort_stacks(&stack_a, &stack_b);
	free_list(stack_a);
	free_list(stack_b);
	return (0);
}

/*
 * Cas spécifiques à tester

    Cas valides simples :
        "4 1 2 3" (entrée en une seule chaîne)
        4 1 2 3 (entrée en arguments séparés)
        -42 0 42 2147483647 -2147483648

    Cas limites et bords :
        2147483647 -2147483648 (limites de l'entier 32 bits)
        0 (cas minimaliste)
        1 2 3 4 5 6 7 8 9 10 (test de liste ordonnée)
        10 9 8 7 6 5 4 3 2 1 (test de liste inversée)

    Cas d'erreurs de format :
        42a (nombre invalide contenant une lettre)
        +42- (mauvais placement des signes)
        --5 (plusieurs signes)
        4.2 (nombre non entier)
        "" (entrée vide)
 " " (entrée uniquement constituée d'espaces)
        " 4 5 6 " (espaces excessifs mais valides)

    Cas de dépassement des limites :
        2147483648 (dépassement de INT_MAX)
        -2147483649 (dépassement de INT_MIN)
        9999999999 (nombre trop grand)
        -9999999999 (nombre trop petit)

    Cas de doublons :
        1 2 3 4 5 2 (un nombre en double)
        100 -100 100 (nombre positif et négatif identiques)
        2147483647 2147483647 (duplication du max)
        -2147483648 -2147483648 (duplication du min)
*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tmp.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkerrien <mkerrien@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/15 01:54:15 by mkerrien          #+#    #+#             */
/*   Updated: 2025/02/16 13:34:10 by mkerrien         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	print_stack(t_dlist *stack, char name)
{
	t_dlist	*tmp;

	ft_printf("Stack %c:\n", name);
	if (!stack)
	{
		ft_printf("   (empty)\n");
		return;
	}
	tmp = stack;
	while (tmp)
	{
		ft_printf("   [%d] value: %d (pos: %d)\n", tmp->index, tmp->value, tmp->pos);
		tmp = tmp->next;
	}
	ft_printf("\n");
}

 void	print_stacks(t_dlist **stack_a, t_dlist **stack_b)
{
	ft_printf("\n-----------------------\n");
	if (stack_a)
		print_stack(*stack_a, 'A');
	if (stack_b)
		print_stack(*stack_b, 'B');
	ft_printf("-----------------------\n\n\n\n\n");
}

void test_push(t_dlist **stack_a, t_dlist **stack_b)
{
	print_stacks(stack_a, stack_b);

	push_b(stack_a, stack_b);
	print_stacks(stack_a, stack_b);
	push_b(stack_a, stack_b);
	print_stacks(stack_a, stack_b);
	push_b(stack_a, stack_b);
	print_stacks(stack_a, stack_b);
	push_b(stack_a, stack_b);
	print_stacks(stack_a, stack_b);

	rotate_r(stack_a, stack_b, 'r');
	print_stacks(stack_a, stack_b);

	reverse_rotate_a(stack_a, 'a');
	print_stacks(stack_a, stack_b);

	swap_s(stack_a, stack_b, 's');
	print_stacks(stack_a, stack_b);

	reverse_rotate_r(stack_a, stack_b, 'r');
	print_stacks(stack_a, stack_b);

	push_a(stack_a, stack_b);
	print_stacks(stack_a, stack_b);
	push_a(stack_a, stack_b);
	print_stacks(stack_a, stack_b);
	push_a(stack_a, stack_b);
	print_stacks(stack_a, stack_b);

	swap_a(stack_a, 'a');
	print_stacks(stack_a, stack_b);

	rotate_a(stack_a, 'a');
	print_stacks(stack_a, stack_b);
}


